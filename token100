pragma solidity ^0.8.4;
contract MyToken { string public name = "My Token"; 
string public symbol = "MYT"; 
uint256 public decimals = 18; 
uint256 public totalSupply; 
mapping(address => uint256) public balanceOf; 
mapping(address => mapping(address => uint256)) public allowance; 
event Transfer(address indexed from, address indexed to, uint256 value); 
event Approval(address indexed owner, address indexed spender, uint256 value); 
constructor() { totalSupply = 100 * 10 ** decimals; balanceOf[msg.sender] = totalSupply; } 
function transfer(address _to, uint256 _value) public returns (bool success) { require(balanceOf[msg.sender] >= _value); 
balanceOf[msg.sender] -= _value; balanceOf[_to] += _value; emit Transfer(msg.sender, _to, _value); return true; } 
function approve(address _spender, uint256 _value) public returns (bool success) { allowance[msg.sender][_spender] = _value; 
emit Approval(msg.sender, _spender, _value); return true; } 
function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) { require(_value <= balanceOf[_from]); 
require(_value <= allowance[_from][msg.sender]); 
balanceOf[_from] -= _value; balanceOf[_to] += _value; allowance[_from][msg.sender] -= _value; 
emit Transfer(_from, _to, _value); 
return true; } function burn(uint256 _value) public returns (bool success) { require(balanceOf[msg.sender] >= _value); 
balanceOf[msg.sender] -= _value; totalSupply -= _value; emit Transfer(msg.sender, address(0), _value); 
return true; } function burnFrom(address _from, uint256 _value) public returns (bool success) { require(balanceOf[_from] >= _value); 
require(_value <= allowance[_from][msg.sender]); 
balanceOf[_from] -= _value; totalSupply -= _value; 
allowance[_from][msg.sender] -= _value; emit Transfer(_from, address(0), _value); return true; } 
function mint(uint256 _value) public returns (bool success) { balanceOf[msg.sender] += _value; 
totalSupply += _value; emit Transfer(address(0), msg.sender, _value); return true;
